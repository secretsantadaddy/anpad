2 daa 10kanpsnak

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int knapsack(int W, vector<int>& weights, vector<int>& values, int n) {
    vector<int> dp(W + 1, 0);
    for (int i = 0; i < n; ++i) {
        for (int w = W; w >= weights[i]; --w) {
            dp[w] = max(dp[w], dp[w - weights[i]] + values[i]);
        }
    }
    return dp[W];
}
int main() {
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;
    cout << "Enter knapsack capacity: ";
    cin >> W;
    vector<int> weights(n), values(n);
    cout << "Enter weights: ";
    for (int i = 0; i < n; ++i) cin >> weights[i];
    cout << "Enter values: ";
    for (int i = 0; i < n; ++i) cin >> values[i];
    cout << "Maximum value that can be carried: " << knapsack(W, weights, values, n) << endl;
    return 0;
}